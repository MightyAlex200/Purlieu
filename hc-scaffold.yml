{
  # This is a holochain scaffold yaml definition. http://ceptr.org/projects/holochain

  # DNA File Version
  # Version indicator for changes to DNA
  "Version": "0.0.1",
  "Generator": "hc-scaffold:0.1.0+e8a394b",

  # Application DNA
  # The DNA specifies the entry structure and functions and configuration of your application
  "DNA": {

    # DNA File Version
    # Version indicator for changes to DNA
    "Version": 1,

    # DNA Unique ID
    # This ID differentiates your app from others. For example, to tell one Slack team from another which same code.
    "UUID": "141a0a72-57d6-4466-a628-2758fd98d60c",

    # Application Name
    # What would you like to call your holochain app?
    "Name": "Purlieu",

    # Properties
    # Properties that you want available across all Zomes.
    "Properties": {

      # Application Description
      # Briefly describe your holochain app.
      "description": "Review app + chat",

      # Language
      # The base (human) language of this holochain app.
      "language": "en"
    },

    # Properties Schema File
    # Describes the entries in the Properties section of your dna file.
    "PropertiesSchemaFile": "properties_schema.json",

    # DHT Settings
    # Configure the properties of your Distributed Hash Table (e.g. hash algorithm, neighborhood size, etc.).
    "DHTConfig": {
      "HashType": "sha2-256"
    },

    # Zomes
    # List the Zomes your application will support.
    "Zomes": [
      {

        # Zome Name
        # The name of this code module.
        "Name": "posts",

        # Zome Description
        # What is the purpose of this module?
        "Description": "posts",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "posts.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "post", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"content\",\n    \"review\"\n  ],\n  \"properties\": {\n    \"content\": {\n      \"$id\": \"#/properties/content\",\n      \"type\": \"string\",\n      \"title\": \"The Content Schema\",\n      \"default\": \"\",\n      \"pattern\": \"^(.*)$\"\n    },\n    \"review\": {\n      \"$id\": \"#/properties/review\",\n      \"type\": \"integer\",\n      \"title\": \"The Review Schema\",\n      \"default\": 0,\n      \"examples\": [\n        4\n      ],\n      \"minimum\": 0,\n      \"maximum\": 5\n    }\n  }\n}",
            "_": "crud"
          },
          {
            "Name": "postLink", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "postCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:post"
          },
          {
            "Name": "postRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:post"
          },
          {
            "Name": "postUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:post"
          },
          {
            "Name": "postDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:post"
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction postCreate (postEntry) {\n  var postHash = commit(\"post\", postEntry);\n  return postHash;\n}\n\nfunction postRead (postHash) {\n  var post = get(postHash);\n  return post;\n}\n\nfunction postUpdate (postHash) {\n  var sampleValue={\"content\":\"a string\",\"review\":4,\"extraField\":true};\n  var postOutHash = update(\"post\", sampleValue, postHash);\n  return postOutHash;\n}\n\nfunction postDelete (postHash) {\n  var result = remove(postHash, \"\");\n  return result;\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"postLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"postLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"postLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"postLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"postLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      },
      {

        # Zome Name
        # The name of this code module.
        "Name": "comments",

        # Zome Description
        # What is the purpose of this module?
        "Description": "comments",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "comments.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "comment", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"comment\"\n  ],\n  \"properties\": {\n    \"comment\": {\n      \"$id\": \"#/properties/comment\",\n      \"type\": \"string\",\n      \"title\": \"The Comment Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"text\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    }\n  }\n}",
            "_": "crud"
          },
          {
            "Name": "commentlink", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "commentCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:comment"
          },
          {
            "Name": "commentRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:comment"
          },
          {
            "Name": "commentUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:comment"
          },
          {
            "Name": "commentDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:comment"
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction commentCreate (commentEntry) {\n  var commentHash = commit(\"comment\", commentEntry);\n  return commentHash;\n}\n\nfunction commentRead (commentHash) {\n  var comment = get(commentHash);\n  return comment;\n}\n\nfunction commentUpdate (commentHash) {\n  var sampleValue={\"comment\":\"text\",\"extraField\":true};\n  var commentOutHash = update(\"comment\", sampleValue, commentHash);\n  return commentOutHash;\n}\n\nfunction commentDelete (commentHash) {\n  var result = remove(commentHash, \"\");\n  return result;\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"comment\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"commentlink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"comment\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"commentlink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"comment\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"commentlink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"comment\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"commentlink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"comment\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"commentlink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      },
      {

        # Zome Name
        # The name of this code module.
        "Name": "menu_items",

        # Zome Description
        # What is the purpose of this module?
        "Description": "post menu items",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "menu_items.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "menuitem", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"id\": \"http://example.com/menu_items/menuitem.json\",\n  \"type\": \"object\",\n  \"required\": [\n    \"age\",\n    \"name\"\n  ],\n  \"properties\": {\n    \"age\": {\n      \"maximum\": 120,\n      \"minimum\": 0,\n      \"default\": 0,\n      \"type\": \"integer\"\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    }\n  }\n}",
            "_": "crud"
          },
          {
            "Name": "itemLink", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "menuitemCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:menuitem"
          },
          {
            "Name": "menuitemRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:menuitem"
          },
          {
            "Name": "menuitemUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:menuitem"
          },
          {
            "Name": "menuitemDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:menuitem"
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction menuitemCreate (menuitemEntry) {\n  var menuitemHash = commit(\"menuitem\", menuitemEntry);\n  return menuitemHash;\n}\n\nfunction menuitemRead (menuitemHash) {\n  var menuitem = get(menuitemHash);\n  return menuitem;\n}\n\nfunction menuitemUpdate (menuitemHash) {\n  var sampleValue={\"age\":0,\"name\":\"a string\",\"extraField\":true};\n  var menuitemOutHash = update(\"menuitem\", sampleValue, menuitemHash);\n  return menuitemOutHash;\n}\n\nfunction menuitemDelete (menuitemHash) {\n  var result = remove(menuitemHash, \"\");\n  return result;\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"menuitem\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"itemLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"menuitem\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"itemLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"menuitem\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"itemLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"menuitem\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"itemLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"menuitem\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"itemLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      },
      {

        # Zome Name
        # The name of this code module.
        "Name": "businesses",

        # Zome Description
        # What is the purpose of this module?
        "Description": "The businesses (restaurants, cafes, bars,  stores)",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "businesses.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "business", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"name\",\n    \"description\",\n    \"hours\",\n    \"avatar\",\n    \"location\",\n    \"locationDescriptor\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"$id\": \"#/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"My store\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"description\": {\n      \"$id\": \"#/properties/description\",\n      \"type\": \"string\",\n      \"title\": \"The Description Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"a store that sells food\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"hours\": {\n      \"$id\": \"#/properties/hours\",\n      \"type\": \"object\",\n      \"title\": \"The Hours Schema\",\n      \"required\": [\n        \"sunday\",\n        \"monday\",\n        \"tuesday\",\n        \"wednesday\",\n        \"thursday\",\n        \"friday\",\n        \"saturday\"\n      ],\n      \"properties\": {\n        \"sunday\": {\n          \"$id\": \"#/properties/hours/properties/sunday\",\n          \"type\": \"array\",\n          \"title\": \"The Sunday Schema\",\n          \"items\": {\n            \"$id\": \"#/properties/hours/properties/sunday/items\",\n            \"type\": \"object\",\n            \"title\": \"The Items Schema\",\n            \"required\": [\n              \"label\",\n              \"from\",\n              \"to\"\n            ],\n            \"properties\": {\n              \"label\": {\n                \"$id\": \"#/properties/hours/properties/sunday/items/properties/label\",\n                \"type\": \"string\",\n                \"title\": \"The Label Schema\",\n                \"default\": \"\",\n                \"examples\": [\n                  \"breakfast\"\n                ],\n                \"pattern\": \"^(.*)$\"\n              },\n              \"from\": {\n                \"$id\": \"#/properties/hours/properties/sunday/items/properties/from\",\n                \"type\": \"integer\",\n                \"title\": \"The From Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  0\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              },\n              \"to\": {\n                \"$id\": \"#/properties/hours/properties/sunday/items/properties/to\",\n                \"type\": \"integer\",\n                \"title\": \"The To Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  1\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              }\n            }\n          }\n        },\n        \"monday\": {\n          \"$id\": \"#/properties/hours/properties/monday\",\n          \"type\": \"array\",\n          \"title\": \"The Monday Schema\",\n          \"items\": {\n            \"$id\": \"#/properties/hours/properties/monday/items\",\n            \"type\": \"object\",\n            \"title\": \"The Items Schema\",\n            \"required\": [\n              \"label\",\n              \"from\",\n              \"to\"\n            ],\n            \"properties\": {\n              \"label\": {\n                \"$id\": \"#/properties/hours/properties/monday/items/properties/label\",\n                \"type\": \"string\",\n                \"title\": \"The Label Schema\",\n                \"default\": \"\",\n                \"examples\": [\n                  \"breakfast\"\n                ],\n                \"pattern\": \"^(.*)$\"\n              },\n              \"from\": {\n                \"$id\": \"#/properties/hours/properties/monday/items/properties/from\",\n                \"type\": \"integer\",\n                \"title\": \"The From Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  0\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              },\n              \"to\": {\n                \"$id\": \"#/properties/hours/properties/monday/items/properties/to\",\n                \"type\": \"integer\",\n                \"title\": \"The To Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  1\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              }\n            }\n          }\n        },\n        \"tuesday\": {\n          \"$id\": \"#/properties/hours/properties/tuesday\",\n          \"type\": \"array\",\n          \"title\": \"The Tuesday Schema\",\n          \"items\": {\n            \"$id\": \"#/properties/hours/properties/tuesday/items\",\n            \"type\": \"object\",\n            \"title\": \"The Items Schema\",\n            \"required\": [\n              \"label\",\n              \"from\",\n              \"to\"\n            ],\n            \"properties\": {\n              \"label\": {\n                \"$id\": \"#/properties/hours/properties/tuesday/items/properties/label\",\n                \"type\": \"string\",\n                \"title\": \"The Label Schema\",\n                \"default\": \"\",\n                \"examples\": [\n                  \"breakfast\"\n                ],\n                \"pattern\": \"^(.*)$\"\n              },\n              \"from\": {\n                \"$id\": \"#/properties/hours/properties/tuesday/items/properties/from\",\n                \"type\": \"integer\",\n                \"title\": \"The From Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  0\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              },\n              \"to\": {\n                \"$id\": \"#/properties/hours/properties/tuesday/items/properties/to\",\n                \"type\": \"integer\",\n                \"title\": \"The To Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  1\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              }\n            }\n          }\n        },\n        \"wednesday\": {\n          \"$id\": \"#/properties/hours/properties/wednesday\",\n          \"type\": \"array\",\n          \"title\": \"The Wednesday Schema\",\n          \"items\": {\n            \"$id\": \"#/properties/hours/properties/wednesday/items\",\n            \"type\": \"object\",\n            \"title\": \"The Items Schema\",\n            \"required\": [\n              \"label\",\n              \"from\",\n              \"to\"\n            ],\n            \"properties\": {\n              \"label\": {\n                \"$id\": \"#/properties/hours/properties/wednesday/items/properties/label\",\n                \"type\": \"string\",\n                \"title\": \"The Label Schema\",\n                \"default\": \"\",\n                \"examples\": [\n                  \"breakfast\"\n                ],\n                \"pattern\": \"^(.*)$\"\n              },\n              \"from\": {\n                \"$id\": \"#/properties/hours/properties/wednesday/items/properties/from\",\n                \"type\": \"integer\",\n                \"title\": \"The From Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  0\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              },\n              \"to\": {\n                \"$id\": \"#/properties/hours/properties/wednesday/items/properties/to\",\n                \"type\": \"integer\",\n                \"title\": \"The To Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  1\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              }\n            }\n          }\n        },\n        \"thursday\": {\n          \"$id\": \"#/properties/hours/properties/thursday\",\n          \"type\": \"array\",\n          \"title\": \"The Thursday Schema\",\n          \"items\": {\n            \"$id\": \"#/properties/hours/properties/thursday/items\",\n            \"type\": \"object\",\n            \"title\": \"The Items Schema\",\n            \"required\": [\n              \"label\",\n              \"from\",\n              \"to\"\n            ],\n            \"properties\": {\n              \"label\": {\n                \"$id\": \"#/properties/hours/properties/thursday/items/properties/label\",\n                \"type\": \"string\",\n                \"title\": \"The Label Schema\",\n                \"default\": \"\",\n                \"examples\": [\n                  \"breakfast\"\n                ],\n                \"pattern\": \"^(.*)$\"\n              },\n              \"from\": {\n                \"$id\": \"#/properties/hours/properties/thursday/items/properties/from\",\n                \"type\": \"integer\",\n                \"title\": \"The From Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  0\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              },\n              \"to\": {\n                \"$id\": \"#/properties/hours/properties/thursday/items/properties/to\",\n                \"type\": \"integer\",\n                \"title\": \"The To Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  1\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              }\n            }\n          }\n        },\n        \"friday\": {\n          \"$id\": \"#/properties/hours/properties/friday\",\n          \"type\": \"array\",\n          \"title\": \"The Friday Schema\",\n          \"items\": {\n            \"$id\": \"#/properties/hours/properties/friday/items\",\n            \"type\": \"object\",\n            \"title\": \"The Items Schema\",\n            \"required\": [\n              \"label\",\n              \"from\",\n              \"to\"\n            ],\n            \"properties\": {\n              \"label\": {\n                \"$id\": \"#/properties/hours/properties/friday/items/properties/label\",\n                \"type\": \"string\",\n                \"title\": \"The Label Schema\",\n                \"default\": \"\",\n                \"examples\": [\n                  \"breakfast\"\n                ],\n                \"pattern\": \"^(.*)$\"\n              },\n              \"from\": {\n                \"$id\": \"#/properties/hours/properties/friday/items/properties/from\",\n                \"type\": \"integer\",\n                \"title\": \"The From Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  0\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              },\n              \"to\": {\n                \"$id\": \"#/properties/hours/properties/friday/items/properties/to\",\n                \"type\": \"integer\",\n                \"title\": \"The To Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  1\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              }\n            }\n          }\n        },\n        \"saturday\": {\n          \"$id\": \"#/properties/hours/properties/saturday\",\n          \"type\": \"array\",\n          \"title\": \"The Saturday Schema\",\n          \"items\": {\n            \"$id\": \"#/properties/hours/properties/saturday/items\",\n            \"type\": \"object\",\n            \"title\": \"The Items Schema\",\n            \"required\": [\n              \"label\",\n              \"from\",\n              \"to\"\n            ],\n            \"properties\": {\n              \"label\": {\n                \"$id\": \"#/properties/hours/properties/saturday/items/properties/label\",\n                \"type\": \"string\",\n                \"title\": \"The Label Schema\",\n                \"default\": \"\",\n                \"examples\": [\n                  \"breakfast\"\n                ],\n                \"pattern\": \"^(.*)$\"\n              },\n              \"from\": {\n                \"$id\": \"#/properties/hours/properties/saturday/items/properties/from\",\n                \"type\": \"integer\",\n                \"title\": \"The From Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  0\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              },\n              \"to\": {\n                \"$id\": \"#/properties/hours/properties/saturday/items/properties/to\",\n                \"type\": \"integer\",\n                \"title\": \"The To Schema\",\n                \"default\": 0,\n                \"examples\": [\n                  1\n                ],\n                \"minimum\": 0,\n                \"maximum\": 86400\n              }\n            }\n          }\n        }\n      }\n    },\n    \"avatar\": {\n      \"$id\": \"#/properties/avatar\",\n      \"type\": \"string\",\n      \"title\": \"The Avatar Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"base64 image data\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"location\": {\n      \"$id\": \"#/properties/location\",\n      \"type\": \"object\",\n      \"title\": \"The Location Schema\",\n      \"required\": [\n        \"lattitude\",\n        \"longitude\"\n      ],\n      \"properties\": {\n        \"lattitude\": {\n          \"$id\": \"#/properties/location/properties/lattitude\",\n          \"type\": \"integer\",\n          \"title\": \"The Lattitude Schema\",\n          \"default\": 0,\n          \"examples\": [\n            0\n          ]\n        },\n        \"longitude\": {\n          \"$id\": \"#/properties/location/properties/longitude\",\n          \"type\": \"integer\",\n          \"title\": \"The Longitude Schema\",\n          \"default\": 0,\n          \"examples\": [\n            0\n          ]\n        }\n      }\n    },\n    \"locationDescriptor\": {\n      \"$id\": \"#/properties/locationDescriptor\",\n      \"type\": \"string\",\n      \"title\": \"The Locationdescriptor Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"the place\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"contactInfo\": {\n      \"$id\": \"#/properties/contactInfo\",\n      \"type\": \"object\",\n      \"title\": \"The Contactinfo Schema\",\n      \"default\": null,\n      \"required\": [\n        \"email\",\n        \"phone\",\n        \"fax\",\n        \"address\"\n      ],\n      \"properties\": {\n        \"email\": {\n          \"$id\": \"#/properties/contactInfo/properties/email\",\n          \"type\": \"string\",\n          \"title\": \"The Email Schema\",\n          \"default\": \"\",\n          \"examples\": [\n            \"stuff\"\n          ],\n          \"pattern\": \"^(.*)$\"\n        },\n        \"phone\": {\n          \"$id\": \"#/properties/contactInfo/properties/phone\",\n          \"type\": \"string\",\n          \"title\": \"The Phone Schema\",\n          \"default\": \"\",\n          \"examples\": [\n            \"stuff\"\n          ],\n          \"pattern\": \"^(.*)$\"\n        },\n        \"fax\": {\n          \"$id\": \"#/properties/contactInfo/properties/fax\",\n          \"type\": \"string\",\n          \"title\": \"The Fax Schema\",\n          \"default\": \"\",\n          \"examples\": [\n            \"stuff\"\n          ],\n          \"pattern\": \"^(.*)$\"\n        },\n        \"address\": {\n          \"$id\": \"#/properties/contactInfo/properties/address\",\n          \"type\": \"string\",\n          \"title\": \"The Address Schema\",\n          \"default\": \"\",\n          \"examples\": [\n            \"stuff\"\n          ],\n          \"pattern\": \"^(.*)$\"\n        }\n      }\n    }\n  }\n}",
            "_": "crud"
          },
          {
            "Name": "businessLink", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "businessCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:business"
          },
          {
            "Name": "businessRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:business"
          },
          {
            "Name": "businessUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:business"
          },
          {
            "Name": "businessDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:business"
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction businessCreate (businessEntry) {\n  var businessHash = commit(\"business\", businessEntry);\n  return businessHash;\n}\n\nfunction businessRead (businessHash) {\n  var business = get(businessHash);\n  return business;\n}\n\nfunction businessUpdate (businessHash) {\n  var sampleValue={\"name\":\"My store\",\"description\":\"a store that sells food\",\"hours\":{\"sunday\":[{\"label\":\"breakfast\",\"from\":0,\"to\":1}],\"monday\":[{\"label\":\"breakfast\",\"from\":0,\"to\":1}],\"tuesday\":[{\"label\":\"breakfast\",\"from\":0,\"to\":1}],\"wednesday\":[{\"label\":\"breakfast\",\"from\":0,\"to\":1}],\"thursday\":[{\"label\":\"breakfast\",\"from\":0,\"to\":1}],\"friday\":[{\"label\":\"breakfast\",\"from\":0,\"to\":1}],\"saturday\":[{\"label\":\"breakfast\",\"from\":0,\"to\":1}]},\"avatar\":\"base64 image data\",\"location\":{\"lattitude\":0,\"longitude\":0},\"locationDescriptor\":\"the place\",\"contactInfo\":{\"email\":\"stuff\",\"phone\":\"stuff\",\"fax\":\"stuff\",\"address\":\"stuff\"},\"extraField\":true};\n  var businessOutHash = update(\"business\", sampleValue, businessHash);\n  return businessOutHash;\n}\n\nfunction businessDelete (businessHash) {\n  var result = remove(businessHash, \"\");\n  return result;\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"business\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"businessLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"business\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"businessLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"business\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"businessLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"business\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"businessLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"business\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"businessLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      },
      {

        # Zome Name
        # The name of this code module.
        "Name": "users",

        # Zome Description
        # What is the purpose of this module?
        "Description": "users",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "users.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "user", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"properties\": {\n    \"facebookId\": {\n      \"$id\": \"#/properties/facebookId\",\n      \"type\": \"string\",\n      \"title\": \"The Facebookid Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"facebook unique id\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"name\": {\n      \"$id\": \"#/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"name\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"bio\": {\n      \"$id\": \"#/properties/bio\",\n      \"type\": \"string\",\n      \"title\": \"The Bio Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"bio\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"languages\": {\n      \"$id\": \"#/properties/languages\",\n      \"type\": \"array\",\n      \"title\": \"The Languages Schema\",\n      \"default\": null,\n      \"items\": {\n        \"$id\": \"#/properties/languages/items\",\n        \"type\": \"string\",\n        \"title\": \"The Items Schema\",\n        \"default\": \"\",\n        \"examples\": [\n          \"en\"\n        ],\n        \"pattern\": \"^(.*)$\"\n      }\n    },\n    \"dob\": {\n      \"$id\": \"#/properties/dob\",\n      \"type\": \"string\",\n      \"title\": \"The Dob Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"date\"\n      ],\n      \"format\": \"date\"\n    },\n    \"avatar\": {\n      \"$id\": \"#/properties/avatar\",\n      \"type\": \"string\",\n      \"title\": \"The Avatar Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"base64 image data\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"gender\": {\n      \"$id\": \"#/properties/gender\",\n      \"type\": \"string\",\n      \"title\": \"The Gender Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"(fe)male or something idk\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"dob\",\n    \"avatar\"\n  ]\n}",
            "_": "ru"
          },
          {
            "Name": "location", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "string", # What type of data should this entry store?
            "Sharing": "private", # Should this entry be publicly accessible?
            "_": "crud"
          },
          {
            "Name": "userPreferenceLink", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "private", # Should this entry be publicly accessible?
            "_": "-"
          },
          {
            "Name": "userLink", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "userRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:user"
          },
          {
            "Name": "userUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:user"
          },
          {
            "Name": "locationCreate", # The name of this function.
            "CallingType": "string", # Data format for parameters passed to this function.
            "Exposure": "private", # Level to which is this function exposed.
            "_": "c:location"
          },
          {
            "Name": "locationRead", # The name of this function.
            "CallingType": "string", # Data format for parameters passed to this function.
            "Exposure": "private", # Level to which is this function exposed.
            "_": "r:location"
          },
          {
            "Name": "locationUpdate", # The name of this function.
            "CallingType": "string", # Data format for parameters passed to this function.
            "Exposure": "private", # Level to which is this function exposed.
            "_": "u:location"
          },
          {
            "Name": "locationDelete", # The name of this function.
            "CallingType": "string", # Data format for parameters passed to this function.
            "Exposure": "private", # Level to which is this function exposed.
            "_": "d:location"
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction userRead (userHash) {\n  var user = get(userHash);\n  return user;\n}\n\nfunction userUpdate (userHash) {\n  var sampleValue={\"facebookId\":\"facebook unique id\",\"name\":\"name\",\"bio\":\"bio\",\"languages\":[\"en\"],\"dob\":\"date\",\"avatar\":\"base64 image data\",\"gender\":\"(fe)male or something idk\",\"extraField\":true};\n  var userOutHash = update(\"user\", sampleValue, userHash);\n  return userOutHash;\n}\n\nfunction locationCreate (locationEntry) {\n  var locationHash = commit(\"location\", locationEntry);\n  return locationHash;\n}\n\nfunction locationRead (locationHash) {\n  var location = get(locationHash);\n  return location;\n}\n\nfunction locationUpdate (locationHash) {\n  var sampleValue={\"extraField\":true};\n  var locationOutHash = update(\"location\", sampleValue, locationHash);\n  return locationOutHash;\n}\n\nfunction locationDelete (locationHash) {\n  var result = remove(locationHash, \"\");\n  return result;\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"location\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userPreferenceLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"location\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userPreferenceLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"location\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userPreferenceLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"location\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userPreferenceLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"user\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"location\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userPreferenceLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"userLink\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      }
    ]
  },

  # TestSets
  # Auto-Generated test sets for hcdev package
  "TestSets": [
    {

      # Name
      # Name of the Test Set
      "Name": "posts",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for postCreate",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "postCreate",

            # Input
            # Input sent to the function
            "Input": {
              "content": "a string",
              "review": 4
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for postRead",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "postRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "content": "a string",
              "review": 4
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for postUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "postUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for postDelete",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "postDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          }
        ]
      }
    },
    {

      # Name
      # Name of the Test Set
      "Name": "comments",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for commentCreate",

            # Zome
            # The zome this test is related to
            "Zome": "comments",

            # Function Name
            # The function to test
            "FnName": "commentCreate",

            # Input
            # Input sent to the function
            "Input": {
              "comment": "text"
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for commentRead",

            # Zome
            # The zome this test is related to
            "Zome": "comments",

            # Function Name
            # The function to test
            "FnName": "commentRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "comment": "text"
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for commentUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "comments",

            # Function Name
            # The function to test
            "FnName": "commentUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for commentDelete",

            # Zome
            # The zome this test is related to
            "Zome": "comments",

            # Function Name
            # The function to test
            "FnName": "commentDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          }
        ]
      }
    },
    {

      # Name
      # Name of the Test Set
      "Name": "menu_items",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for menuitemCreate",

            # Zome
            # The zome this test is related to
            "Zome": "menu_items",

            # Function Name
            # The function to test
            "FnName": "menuitemCreate",

            # Input
            # Input sent to the function
            "Input": {
              "age": 0,
              "name": "a string"
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for menuitemRead",

            # Zome
            # The zome this test is related to
            "Zome": "menu_items",

            # Function Name
            # The function to test
            "FnName": "menuitemRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "age": 0,
              "name": "a string"
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for menuitemUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "menu_items",

            # Function Name
            # The function to test
            "FnName": "menuitemUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for menuitemDelete",

            # Zome
            # The zome this test is related to
            "Zome": "menu_items",

            # Function Name
            # The function to test
            "FnName": "menuitemDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          }
        ]
      }
    },
    {

      # Name
      # Name of the Test Set
      "Name": "businesses",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for businessCreate",

            # Zome
            # The zome this test is related to
            "Zome": "businesses",

            # Function Name
            # The function to test
            "FnName": "businessCreate",

            # Input
            # Input sent to the function
            "Input": {
              "name": "My store",
              "description": "a store that sells food",
              "hours": {
                "sunday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "monday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "tuesday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "wednesday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "thursday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "friday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "saturday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ]
              },
              "avatar": "base64 image data",
              "location": {
                "lattitude": 0,
                "longitude": 0
              },
              "locationDescriptor": "the place",
              "contactInfo": {
                "email": "stuff",
                "phone": "stuff",
                "fax": "stuff",
                "address": "stuff"
              }
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for businessRead",

            # Zome
            # The zome this test is related to
            "Zome": "businesses",

            # Function Name
            # The function to test
            "FnName": "businessRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "name": "My store",
              "description": "a store that sells food",
              "hours": {
                "sunday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "monday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "tuesday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "wednesday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "thursday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "friday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ],
                "saturday": [
                  {
                    "label": "breakfast",
                    "from": 0,
                    "to": 1
                  }
                ]
              },
              "avatar": "base64 image data",
              "location": {
                "lattitude": 0,
                "longitude": 0
              },
              "locationDescriptor": "the place",
              "contactInfo": {
                "email": "stuff",
                "phone": "stuff",
                "fax": "stuff",
                "address": "stuff"
              }
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for businessUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "businesses",

            # Function Name
            # The function to test
            "FnName": "businessUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for businessDelete",

            # Zome
            # The zome this test is related to
            "Zome": "businesses",

            # Function Name
            # The function to test
            "FnName": "businessDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          }
        ]
      }
    },
    {

      # Name
      # Name of the Test Set
      "Name": "users",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userRead",

            # Zome
            # The zome this test is related to
            "Zome": "users",

            # Function Name
            # The function to test
            "FnName": "userRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "facebookId": "facebook unique id",
              "name": "name",
              "bio": "bio",
              "languages": [
                "en"
              ],
              "dob": "date",
              "avatar": "base64 image data",
              "gender": "(fe)male or something idk"
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for userUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "users",

            # Function Name
            # The function to test
            "FnName": "userUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for locationCreate",

            # Zome
            # The zome this test is related to
            "Zome": "users",

            # Function Name
            # The function to test
            "FnName": "locationCreate",

            # Input
            # Input sent to the function
            "Input": "test",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for locationRead",

            # Zome
            # The zome this test is related to
            "Zome": "users",

            # Function Name
            # The function to test
            "FnName": "locationRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "test"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for locationUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "users",

            # Function Name
            # The function to test
            "FnName": "locationUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for locationDelete",

            # Zome
            # The zome this test is related to
            "Zome": "users",

            # Function Name
            # The function to test
            "FnName": "locationDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          }
        ]
      }
    }
  ]
}